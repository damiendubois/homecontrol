'use strict';

var gulp = require('gulp');
var $ = require('gulp-load-plugins')({lazy: false});
var noop = $.util.noop;
var es = require('event-stream');
var wiredep = require('wiredep').stream;
var mainBowerFiles = require('main-bower-files');
var rimraf = require('rimraf');
var lazypipe = require('lazypipe');
var isWatching = false;
var colors = $.util.colors;
var browserSync = require('browser-sync');
var restEmulator = require('gulp-rest-emulator');
var ngConstant = require('gulp-ng-constant');
var less = require('gulp-less');
var rename = require('gulp-rename');
var ngAnnotate = require('gulp-ng-annotate');
var angularFileSort = require('gulp-angular-filesort');
var addsrc = require('gulp-add-src');
var jshint = require('gulp-jshint');
var stylish =  require('jshint-stylish');
var htmlhint = require("gulp-htmlhint");
var htmlminOpts = {
  removeComments: true,
  collapseWhitespace: true,
  removeEmptyAttributes: false,
  collapseBooleanAttributes: true,
  removeRedundantAttributes: true
};

var paths = {
    styles: 'client/app/app.less',
    images: 'client/img/**/*.*',
    index: 'client/index.html',
    bower_fonts: 'client/bower_components/**/*.{ttf,woff,eof,svg}',
};

var jshintConfig = {
  "predef": ["angular", "window"],
  "strict":"global"
};

// Dev tasks
// ----------

// Index
gulp.task('index', index);

// Build
gulp.task('build', ['html-hint','js-hint','custom-less'],index);

// Default task
gulp.task('default', ['build']);

// Start server
gulp.task('serve', ['clean','config','build'], function () {
  gulp.watch(['./client/**/*.{js,html,less,css}','!./client/app/app.css','!./client/app/ngConstants.js','!./client/index.html'], ['build']);
  isWatching = true;
  $.nodemon({
    script: './server/app.js',
    watch: ['./server']
  })
  .on('restart', function () {
    setTimeout(function () {
      browserSync.reload();
    }, 1000);
  })
  .once('start', startBrowserSync);
});

//Start server in a mock mode
gulp.task('mock', function() {
  // Options not require
    var options = {
        port: 8090,
        root: ['./'],
        corsEnable: true // Set true to enable CORS
      };
    return gulp.src('./client/mocks/**/*.js')
        .pipe(restEmulator(options));
});

gulp.task('custom-less', function() {
    return gulp.src("client/app/app.less")
        .pipe(less())
        .pipe(gulp.dest('client/app/'))
        .pipe(livereload());
});

gulp.task('serve-mock',['clean','config-mock','build','mock'], function() {
  gulp.watch(['./client/**/*.{js,html,less,css}',!'./client/app/app.css','!./client/app/ngConstants.js','!./client/index.html'], ['build']);
  browserSync({
    server:["client"],
    port: 3000,
    files: ['client/**/*.*']
  });
});

gulp.task('config-mock', function () {

  var myConfig = require('./client/config/config.json');
  var envConfig = myConfig["mock"];
  return ngConstant({
      wrap: '"use strict";\n// DO NOT EDIT THIS FILE, EDIT THE GULP TASK SETTINGS INSTEAD WHICH GENERATES THIS FILE\n<%= __ngModule %>',
      constants: envConfig,
      name:"app.config",
      filename: "generated-config.js",
      stream: true
    })
    .pipe(gulp.dest('./client/app'));
});

gulp.task('config', function () {

  var myConfig = require('./client/config/config.json');
  var envConfig = myConfig["development"];
  return ngConstant({
      wrap: '"use strict";\n// DO NOT EDIT THIS FILE, EDIT THE GULP TASK SETTINGS INSTEAD WHICH GENERATES THIS FILE\n<%= __ngModule %>',
      constants: envConfig,
      name:"app.config",
      filename: "generated-config.js",
      stream: true
    })
    .pipe(gulp.dest('./client/app'));
});
// Dist tasks
// ----------

// Optimize JS
gulp.task('vendors-js', function () {
  var js = mainBowerFiles({filter: /\.js$/});
  return gulp.src(js).pipe(dist('js', 'vendor'));
});

// Optimize all
gulp.task('vendors', ['vendors-js']);

// Minify, compile and concat templates
gulp.task('templates', function () {
  return gulp.src(['./client/{app,components}/**/*.html'])
    .pipe(htmlhint('.htmlhintrc'))
    .pipe(htmlhint.reporter('htmlhint-stylish'))
    .pipe($.htmlmin(htmlminOpts))
    .pipe($.ngHtml2js({moduleName: 'app'}))
    .pipe($.concat('templates.js'))
    .pipe(gulp.dest('./.tmp'));
});

// Run dist tasks for scripts
gulp.task('scripts', ['templates'], function () {
  return appFiles().pipe(dist('js', 'app'));
});

// Run dist tasks for styles
gulp.task('styles', function () {
  return cssFiles().pipe(dist('css', 'app'));
});

// Inject app/vendor styles and scripts
gulp.task('inject', ['vendors', 'scripts', 'styles'], function () {
  return gulp.src('./client/index.html')
    .pipe($.inject(gulp.src('./.tmp/app.min.{js,css}'), {
      ignorePath: '.tmp'
    }))
    .pipe($.inject(gulp.src('./.tmp/vendor.min.js'), {
      ignorePath: '.tmp',
      starttag: '<!-- inject:vendor:{{ext}} -->'
    }))
    .pipe(gulp.dest('./dist/public'));
});

// Replace index styles and script tags with revved files
gulp.task('rev', ['inject'], function () {
  return gulp.src(['./.tmp/**/*.json', './dist/public/index.html'])
    .pipe($.revCollector({replaceReved: true}))
    .pipe(gulp.dest('./dist/public'));
});

// Copy server to dist
gulp.task('copy-server', function () {
  return gulp.src('./server/**/*')
    .pipe(gulp.dest('./dist/server'));
});

// Copy favicon.ico to dist
gulp.task('copy-favicon', function () {
  return gulp.src('./client/favicon.ico')
    .pipe(gulp.dest('./dist/public'));
});

// Copy bootstrap glyphicons fonts
gulp.task('copy-glyphicons', function () {
  return gulp.src(['client/bower_components/**/*.{ttf,woff,eof,svg,woff2}'
    ,'!client/bower_components/flag-icon-css/**/*.svg'])
    .pipe(rename({dirname: ''}))
    .pipe(gulp.dest('./dist/public/fonts'));
});

// Copy svg
gulp.task('copy-flags', function () {
  return gulp.src('client/bower_components/flag-icon-css/flags/**/*.svg')
    .pipe(gulp.dest('./dist/public/fonts/flags'));
});

// Copy images
gulp.task('copy-images', function () {
  return gulp.src('./client/img/**/*')
    .pipe(gulp.dest('./dist/public/img'));
});

// Clean dist
gulp.task('clean', function (done) {
  rimraf('./{dist,.tmp}/', done);
});

// Build app for production
gulp.task('build-all', ['html-hint','js-hint','clean','rev','config', 'copy-server','copy-flags', 'copy-glyphicons','copy-images', 'copy-favicon'], function () {
  return gulp.src('./dist/public/index.html')
    .pipe($.htmlmin(htmlminOpts))
    .pipe(gulp.dest('./dist/public'));
});

// Build production ready distribution into dist directory
gulp.task('dist', ['clean'], function (done) {
  gulp.start('build-all', done);
});

// Run dist server in production mode
gulp.task('serve-dist',function () {
  $.nodemon({
    script: './dist/server/app.js',
    env: {NODE_ENV: 'uat'},
    watch: ['!*.*'],
    quiet: false
  });
});

//js quality
gulp.task('html-hint', function () {
  return gulp.src('./client/{app,components}/**/*.html')
    .pipe(htmlhint('.htmlhintrc'))
    .pipe(htmlhint.reporter('htmlhint-stylish'));
});

//js quality
gulp.task('js-hint', function () {
  return gulp.src('./client/{app,components}/**/*.js')
    .pipe(jshint(jshintConfig))
    .pipe(jshint.reporter(stylish))
    .pipe(jshint.reporter('fail'));
});

// Inject vendors from bower and our app (js) files into index.html
function index() {
  var opt = {read: false};
  return gulp.src('./client/index.html')
    .pipe(wiredep())
    .pipe($.inject(es.merge(appFiles(opt), cssFiles(opt)), {
      ignorePath: ['../.tmp'],
      relative: true
    }))
    .pipe(gulp.dest('./client'))
    .pipe(livereload());
}

// All our application CSS files as a stream
function cssFiles(opt) {
  return gulp.src('./client/app/app.css', opt);
}

// All our application JS files as a stream
function appFiles(opt) {
  return gulp.src(['./client/{app,components}/**/*.js'])
    .on('error',function(e){console.log(e)})
    .pipe(angularFileSort())
    .on('error',function(e){console.log(e)})
    .pipe(addsrc.append('./.tmp/templates.js'))
    .on('error',function(e){console.log(e)});
}

/**
 * Concat, minify, rename, rev
 * ext: string file extension (js, css)
 * name: string file name (app, vendor, etc)
 */
function dist(ext, name) {
  return lazypipe()
    .pipe($.concat, name + '.' + ext)
    .pipe(ext === 'js' ? ngAnnotate : $.minifyCss)
    .pipe(ext === 'js' ? $.uglify : $.minifyCss)
    .pipe($.rename, name + '.min.' + ext)
    .pipe(gulp.dest, './.tmp')
    .pipe($.rev)
    .pipe(gulp.dest, './dist/public')
    .pipe($.rev.manifest)
    .pipe(gulp.dest, './.tmp/rev-' + name + '-' + ext)();
}

// Starts browser sync
function startBrowserSync() {
  var config = require('./server/config/environment');
  browserSync({
    proxy: 'localhost:' + config.port,
    port: 3000,
    files: ['client/**/*']
  });
}

// Reload browser (or noop if not run by watch)
function livereload() {
  return lazypipe()
    .pipe(isWatching ? browserSync.stream : noop)();
}
